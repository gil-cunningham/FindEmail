package com.gil.example;

import java.io.IOException;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.jsoup.nodes.Document;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;


public final class FindEmail {
	
	public static void main(String[] args) throws IOException
	{
		System.out.println("FindEmail:");
		
		if (args != null && args.length > 0) {
			for (int i = 0; i < args.length; i++) {
				System.out.println(args[i]);
			}
			
		}
		
		// parse for URL validitiy		
		String url = args[0];		
		System.out.println("URL="+url);
		
		Set<String> links = new HashSet<String>();
		links.add(url);
		
		Set<String> discoverMe = new HashSet<String>();
		discoverMe.add(url);
		
		
		links = discoverAllLinks(links, discoverMe, url);
		
		/**
		
        Document doc = Jsoup.connect("http://" + url).get(); // "http://" + args[0]).get();
        //stackoverflow.com/questions/15893655/magento-ecomdev-phpunit-customer-fixtures-are-not-being-loaded/16668990#16668990").get();
       
        Pattern p = Pattern.compile("[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+");
        Matcher matcher = p.matcher(doc.text());
        Set<String> emails = new HashSet<String>();
        while (matcher.find()) {
            emails.add(matcher.group());
        }
        
        // generate 
        
        //Set<String> links = new HashSet<String>();

        Elements elements = doc.select("a[href]");
        for (Element e : elements) {
            links.add(e.attr("href"));
        }
        
        emails = getAllEmails(links, emails, url);
        
        System.out.println(emails);
        
        **/
        
        
        System.out.println(links);

	    
		System.out.println("FindEmail Done");
	}
	
	private static Set<String> discoverAllLinks(Set<String> links2, Set<String> discoverMe, String url)
	{
		try {
			
			////
			System.out.println("******* DISCOVER LINKS ******");
			for (String s : discoverMe) {
				System.out.println("DISCOVER LINK = " + s);
			}
			System.out.println("******* !! DISCOVER LINKS ******");
			////
			
			Set<String> removeMe = new HashSet<String>();
			//Set<String> discoverMe = new HashSet<String>();
			
			for (String link : discoverMe) {
				
				System.out.println("LINK="+link);
				
				Document doc = Jsoup.connect("http://" + link).get(); // "http://" + args[0]).get();			
				Elements elements = doc.select("a[href]");				
				
				for (Element e : elements) {
		        	
		        	String l = e.attr("href");
		        	if (l.contains(url)) {
						System.out.println("Contains="+l);
						links2.add(l);
						discoverMe.add(l);
					}
		        	else {		        		
		        		removeMe.add(l);	
		        	}
		        }
			}
			
			for (String foo : removeMe) {
				System.out.println("REMOVE ME = " + foo);
			}
			
			for (String foo : discoverMe) {
				System.out.println("DISCOVER ME = " + foo);
			}
			
			for (String foo : links2) {
				System.out.println("LINKS = " + foo);
			}
			
			
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		
		return links2;
	}
	
	private static Set<String> getAllEmails(Set<String> links, Set<String> emails, String url)
	{
		Set<String> removeMe = new HashSet<String>();
		
		for (String s : links) {
		
			if (s.contains(url)) {
				System.out.println("Contains="+s);
			}
			else {
				removeMe.add(s);
			}
			
			//	links.remove(s);
			//}			
		}
		
		if (removeMe.size() > 0) {
			links.removeAll(removeMe);			
		}
		
		System.out.println("NOW");
		
		
		
		//Document doc = Jsoup.connect(url).get();
		
		
		return emails;
	}

}
