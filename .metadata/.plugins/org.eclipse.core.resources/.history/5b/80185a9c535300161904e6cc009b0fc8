package com.gil.example;

import java.util.HashSet;
import java.util.Set;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

public class DiscoverLinks {

	private String _url;
	
	public DiscoverLinks(String url)
	{
		_url = url;
		
		
	}
	
	public Set<String> discoverAllLinks(Set<String> allLinks, Set<String> discoverLinks, String url)
	{		
		////
		/**
		System.out.println("******* DISCOVER LINKS ******");
		for (String s : discoverLinks) {
			System.out.println("DISCOVER LINK = " + s);
		}
		System.out.println("******* !! DISCOVER LINKS ******");
		**/
		////
		
		//Set<String> removeMe = new HashSet<String>();
		Set<String> newDiscoverLinks = new HashSet<String>();
		
		for (String link : discoverLinks) {
			
			System.out.println("DISCOVER LINK="+link);
			
			try {
			
				Document doc = Jsoup.connect("http://" + link).get(); // "http://" + args[0]).get();			
				Elements elements = doc.select("a[href]");				
				
				for (Element e : elements) {
		        	
		        	String l = e.attr("href");
		        	if (l.contains(url)) {
						//System.out.println("Contains="+l);
						allLinks.add(l);
						newDiscoverLinks.add(l);
					}
		        	//else {		        		
		        	//	removeMe.add(l);	
		        	//}
		        }
			}
			catch (Exception e) {
				//e.printStackTrace();
			}			
		}
		
		/**
		for (String foo : removeMe) {
			System.out.println("REMOVE ME = " + foo);
		}
		
		for (String foo : newDiscoverLinks) {
			System.out.println("NEW DISCOVER ME = " + foo);
		}
		
		for (String foo : allLinks) {
			System.out.println("LINKS = " + foo);
		}
		**/
		
		if (newDiscoverLinks.size() > 0) {
			return discoverAllLinks(allLinks, newDiscoverLinks, url);
		}
		
		return allLinks;
	}
	
}
